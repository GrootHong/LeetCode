package hot100.exercise0096;

/*
给定一个整数 n，求以 1 ... n 为节点组成的二叉搜索树有多少种？
示例:
输入: 3
输出: 5
解释:
给定 n = 3, 一共有 5 种不同结构的二叉搜索树:

   1         3     3      2      1
    \       /     /      / \      \
     3     2     1      1   3      2
    /     /       \                 \
   2     1         2                 3
 */

/**
 * 思路：
 * n个节点，都是某一个节点+其他n-1个节点
 * 当选定某一个节点作为根节点之后，剩下的n-1个节点就自动的分成了两组，小于选定节点的一组，和大于选定节点的一组
 * 那么在选定节点的一组中，假设有i个节点，那这i个节点可以组成的不同结构的二叉搜索树假设为f(i),
 * 那么，选定的根节点的二叉搜索树一共有f(i)*f(n-1-i)个。
 *
 * 步骤：
 * 1.定义一个一维数组dp[n+1]，表示对应个节点的二叉搜索树个数。
 * 2.初始化dp[0]=0,dp[1]=1,dp[2]=2,
 * 3.dp[i] = dp[1]*dp[i-2]+dp[2]*dp[i-3]+...+dp[i-2]*dp[1];
 * 4.最后返回dp[n].
 */
public class DifferentBST {

    public int numTrees(int n) {
        if(n<=0){
            return 0;
        } else if(n==1){
            return 1;
        } else if(n==2){
            return 2;
        }
        int[] dp = new int[n+1];
        dp[0] = 1;
        dp[1] = 1;
        dp[2] = 2;
        for(int i=3;i<n+1;i++){
            for(int j=0;j<i;j++){
                dp[i] += dp[j]*dp[i-j-1];
            }
        }
        return dp[n];
    }
}
