package top.exercise0036;

/*
判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。
数字 1-9 在每一行只能出现一次。
数字 1-9 在每一列只能出现一次。
数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。
上图是一个部分填充的有效的数独。
数独部分空格内已填入了数字，空白格用 '.' 表示。
示例 1:
输入:
{
  {'5','3','.','.','7','.','.','.','.'},
  {'6','.','.','1','9','5','.','.','.'},
  {'.','9','8','.','.','.','.','6','.'},
  {'8','.','.','.','6','.','.','.','3'},
  {'4','.','.','8','.','3','.','.','1'},
  {'7','.','.','.','2','.','.','.','6'},
  {'.','6','.','.','.','.','2','8','.'},
  {'.','.','.','4','1','9','.','.','5'},
  {'.','.','.','.','8','.','.','7','9'}
}
输出: true
示例 2:
输入:
{
  {'8','3','.','.','7','.','.','.','.'},
  {'6','.','.','1','9','5','.','.','.'},
  {'.','9','8','.','.','.','.','6','.'},
  {'8','.','.','.','6','.','.','.','3'},
  {'4','.','.','8','.','3','.','.','1'},
  {'7','.','.','.','2','.','.','.','6'},
  {'.','6','.','.','.','.','2','8','.'},
  {'.','.','.','4','1','9','.','.','5'},
  {'.','.','.','.','8','.','.','7','9'}
}
输出: false
解释: 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。
     但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
说明:
一个有效的数独（部分已被填充）不一定是可解的。
只需要根据以上规则，验证已经填入的数字是否有效即可。
给定数独序列只包含数字 1-9 和字符 '.' 。
给定数独永远是 9x9 形式的。
 */

import java.util.HashSet;

/**
 * 思路
 * 直观解法，首先遍历每一行，看是否有效
 * 再遍历每一列，看是否有效，
 * 最后再遍历每一格九宫格，看是否有效。
 * 定义一个hashset，将每一行，每一列，每个九宫格遍历完都清空set，一旦重复，直接返回false。
 */
public class ValidSudoku {
    public static void main(String[] args) {
        char[][] chars = {
                {'8','3','.','.','7','.','.','.','.'},
                {'6','.','.','1','9','5','.','.','.'},
                {'.','9','8','.','.','.','.','6','.'},
                {'8','.','.','.','6','.','.','.','3'},
                {'4','.','.','8','.','3','.','.','1'},
                {'7','.','.','.','2','.','.','.','6'},
                {'.','6','.','.','.','.','2','8','.'},
                {'.','.','.','4','1','9','.','.','5'},
                {'.','.','.','.','8','.','.','7','9'}
        };
        ValidSudoku v = new ValidSudoku();
        boolean flag = v.isValidSudoku(chars);
        System.out.println(flag);
    }
    public boolean isValidSudoku(char[][] board) {
        HashSet<Character> set = new HashSet<>();
        //遍历行
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if(set.contains(board[i][j])){
                    return false;
                } else if(board[i][j]>='0'&&board[i][j]<='9'){
                    set.add(board[i][j]);
                }
            }
            set.clear();
        }
        //遍历列
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if (set.contains(board[j][i])){
                    return false;
                } else if(board[j][i]>='0'&&board[j][i]<='9'){
                    set.add(board[j][i]);
                }
            }
            set.clear();
        }
        //遍历九宫格
        for(int i=0;i<9;i+=3){
            for(int j=0;j<9;j+=3){
                for(int row=i;row<i+3;row++){
                    for(int col = j;col<j+3;col++){
                        if(set.contains(board[row][col])){
                            return false;
                        } else if(board[row][col]>='0'&&board[row][col]<='9'){
                            set.add(board[row][col]);
                        }
                    }
                }
                set.clear();
            }
        }
        return true;
    }
}
